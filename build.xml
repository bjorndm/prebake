<project name="prebake" default="default" basedir=".">
  <description>
  A build system that provides a useful level of hermeticism.
  </description>

  <!--== inputs ==-->
  <property name="src"         location="src"/>
  <property name="tests"       location="tests"/>
  <property name="third_party" location="third_party"/>
  <!--== outputs ==-->
  <property name="reports"     location="ant-reports"/>  <!-- emma reports -->
  <property name="lib"         location="ant-lib"/>
  <property name="docs"        location="ant-docs"/>
  <property name="jars"        location="ant-jars"/>

  <!--== classpaths ==-->
  <path id="classpath.compile">
    <pathelement path="${third_party}/bdb/je.jar"/>
    <pathelement path="${third_party}/fast-md5/fast-md5.jar"/>
    <pathelement path="${third_party}/guava-libraries/guava.jar"/>
    <pathelement path="${third_party}/rhino/js.jar"/>
  </path>
  <path id="classpath.tests.compile">
    <path refid="classpath.compile"/>
    <pathelement path="${third_party}/junit/junit.jar"/>
  </path>
  <path id="classpath.tests.run">
    <path refid="classpath.tests.compile"/>
    <pathelement path="${lib}"/>
    <pathelement path="${third_party}/junit/junit.jar"/>
  </path>

  <target name="default" depends="classes"
   description="Builds the plugin compiler."/>

  <target name="all" depends="classes,jars,runtests"
   description="Builds the service, client, and documentation; and runs tests."
   />

  <target name="clean"
   description="deletes all generated files leaving only sources">
    <delete dir="${docs}"/>
    <delete dir="${jars}"/>
    <delete dir="${lib}"/>
    <delete dir="${reports}"/>
  </target>

  <target name="dirs">
    <mkdir dir="${docs}"/>
    <mkdir dir="${jars}"/>
    <mkdir dir="${lib}"/>
    <mkdir dir="${reports}"/>
  </target>

  <target name="runtests" depends="tests" description="Runs unittests.">
    <mkdir dir="${reports}/tests"/>
    <!--
      - If this fails to run, try with -verbose.  If you see a problem with
      - forking, check your JAVA and JAVA_HOME environment variables and make
      - sure ant is using jdk1.6.
     -->
    <junit printsummary="yes" fork="yes" maxmemory="512m"
      errorProperty="runtests.error" failureProperty="runtests.failure">
      <assertions><enable/></assertions>  <!-- ignored unless fork="yes" -->
      <classpath refid="classpath.tests.run"/>
      <formatter type="xml" usefile="true"/>
      <!--formatter type="brief" usefile="false"/-->
      <batchtest todir="${reports}/tests">
        <fileset dir="${tests}">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
      <sysproperty key="user.language" value="tr"/>
      <sysproperty key="user.region" value="TR"/>
    </junit>
    <!-- Generate the test results report. -->
    <junitreport todir="${reports}/tests">
      <fileset dir="${reports}/tests" includes="TEST-*.xml"/>
      <report format="frames" todir="${reports}/tests"/>
    </junitreport>
    <fail message=
     "One or more tests failed. For details, see ${reports}/tests/index.html"
     if="runtests.error"/>
    <fail message=
     "One or more tests failed. For details, see ${reports}/tests/index.html"
     if="runtests.failure"/>
  </target>

  <target name="checks" depends="classes" description="Runs Findbugs">
    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
     classpath="${third_party}/findbugs/lib/findbugs-ant.jar"/>
    <mkdir dir="${reports}/bugs"/>
    <!-- See http://findbugs.sourceforge.net/manual/anttask.html -->
    <findbugs home="${third_party}/findbugs" reportLevel="medium"
     output="html" outputFile="${reports}/bugs/index.html" effort="max">
      <auxClasspath refid="classpath.tests.run" />
      <sourcePath path="${src}" />
      <class location="${lib}" />
    </findbugs>
  </target>

  <target name="docs" description="Builds javadoc documentation."
   depends="dirs">
    <javadoc sourcepath="${src}" destdir="${docs}" access="private"
     author="true"
     docencoding="utf-8"
     packagenames="org/prebake/*"
     classpathref="classpath.compile"
     includenosourcepackages="true"
     linksource="yes"/>
  </target>

  <target name="classes" depends="dirs">
    <javac destdir="${lib}" debug="true" target="1.5" source="1.5">
      <src path="${src}"/>
      <classpath refid="classpath.compile"/>
      <include name="**/*.java"/>
      <exclude name="org/prebake/fs/*.java"/>
      <compilerarg line="-Xlint:deprecation"/>
      <compilerarg line="-Xlint:unchecked"/>
    </javac>
    <copy todir="${lib}">
      <fileset dir="${src}">
        <include name="org/prebake/service/tools/*.js"/>
      </fileset>
    </copy>
    <fileset dir="${lib}/org/prebake/service/tools" id="builtin.tools">
      <include name="*.js"/>
    </fileset>
    <pathconvert pathsep="&#10;" property="builtin.tools.list"
     refid="builtin.tools">
      <map from="${lib}/org/prebake/service/tools/" to=""/>
    </pathconvert>
    <echo message="${builtin.tools.list}"
     file="${lib}/org/prebake/service/tools/tools.txt"/>
  </target>

  <target name="tests" depends="classes">
    <javac destdir="${lib}" debug="true" target="1.5" source="1.5">
      <src path="${tests}"/>
      <classpath refid="classpath.tests.compile"/>
      <include name="**/*.java"/>
      <compilerarg line="-Xlint:deprecation"/>
      <compilerarg line="-Xlint:unchecked"/>
    </javac>
  </target>

  <target name="jars" depends="classes">
    <jar destfile="${jars}/prebake.jar">
      <manifest>
        <attribute name="Main-Class"
         value="org.prebake.prebakery"/>
      </manifest>
      <fileset dir="${lib}">
        <include name="org/prebake/**"/>
      </fileset>
    </jar>
  </target>
</project>
