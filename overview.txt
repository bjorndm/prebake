Goal
(1) Allow hashing of target commands
(2) Allow callers of exec to react to exec results
(3) Allow filtering of file list based on actual files.

Opion 1
Action is a command line that is executed.

Command line can be hashed

Can't respond to exec result.

Can't filter.


Option 2
Action is a function that is called with files and can filter and provide a callback to receive results of exec.

Can't be hashed

Can respond to exec results.

Can filter.


Option 3
Identify a subset of hashable functions -- no free variables.

TODO


Option 4
Action is a command line with an optional javascript file that can reinterpret file lists and do follow on commands.


Option 5
Action's are specified in terms of a javascript file.

javac loads javac.js which receives an exec function, a file system object, and a bundle of JSON.
Possibly including functions with no free variables.

Satisfies all 3.




With option 5,

There is a search path of command line wrappers:
  tools/
    javac.js
    gcc.js
    ...
for each of these, we extract top level functions added, associated documentation, and argument validators (no-free-var functions that take the JSON arguments and can report errors or warnings).

The environment available to these files is
  os
    exec(path, [flags], opt_callback)



The prebakery knows a list of plan files, that can load other files.
The prebakery keeps a bit as to whether or not the plan files are consistent.

When the tools change, or the plans or their dynamic deps change:

They run in a context where each recipe is bound to a function
that generates a JSON action description : recipe to invoke plus JSON arguments, e.g. [ 'gcc', { '-O': 3 } ] and that peform validation.

The environment available looks like:
    products (receives targets described below)
    tools (populated from the command line wrappers above)
    Math.random()  // attenuated to warn
    Date   // attenuated to warn when constructed
      .time  // attenuated to warn when called
    console  // for debugging
    help  // prints help text when called with no arguments, and otherwise prints docs associated with a function
    load(source_file)  // adds to a set of dynamic deps, loads and parses the file, returning a function.

TODO Issue a warning if load()ed module never invoked.
 
The plan files can register targets:
      inputs: ["foo/**/*.bar", ...]
      actions: list of JSON action descriptions
      outputs: list of globs as inputs
      docstring: ...
using a syntax like
      products.foo = { actions: [ tools.javac({ source: 1.5 } ], inputs: [ '**/*.java' ], outputs: ['**/*.class'], doc: { ... } };

The products host object checks that the result is Î›SON, and checks that it knows the keys available.  It will do a levenshtein distance check from any unknown keys to known keys and suggests "did you mean?" fixes.

If the prebakery has hashes for the plan files which are up-to-date,
   it uses its stored product definitions
else 
   it runs the plan files 
     If the plan files fail to parse or throw,
       mark the plan inconsistent
     else
        collect the products members assigned
     if the plan files did not call Math.random() or Date
       it hashes them and any dynamic deps (see load()) to the (consistent bit, products)

For each product,
  hash it.
  if the hash doesn't match, mark it dirty and throw out any edges with it as an endpoint

For each undirty product,
  if it doesn't exist in the list of names from plan files, discard it and any edges with it as an endpoint.

For each dirty product p
  for each product q
    if p.outputs intersects q.inputs or p.inputs intersects q.outputs
      add an edge

Check the graph for edges by walking from each newly introduced edge.

Done plan files change



When a plan is needed for a set of targets:

try to make the plan consistent.  fail if the plan is inconsistent

walk the graph to generate an ordered set of all dependencies.

plan(set<targets>) -> list<targets>



When targets needs to be realized:

generate a plan(targets).

while count(unsatisfied) != count(unsatisfiable)
  for target in plan:
    if #pending-dependencies for target != 0
      get input file list:
        if the in-memory tree has not changed since the inputs glob was last intersected,
          use that result
        else
          walk the tree intersecting with the input globs
      hash(input file list, target actions)
      if hash does not match:
        create a temp directory
        copy inputs to that directory
        execute actions (see below)
        if actions succeed
          intersect output globs with tmp file tree
          copy matched outputs back
          store hash
          mark target satisfiable and decrement pending counts for dependers
        else
          mark target unsatisfiable
    else
      if any dependencies unsatisfiable
        mark target unsatisfiable
      else
        requeue
if all targets satisfied
  report success
else
  report failed targets



When executing actions
TODO
