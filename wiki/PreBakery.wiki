#summary a service that watches files and maintains plans

The {{{prebakery}}} is a persistent service that services [PreBakeCommand commands] from the PreBake client.

It can be started by following the instructions under [Usage usage].


= Requirements =
JDK1.7 is required because the PreBakery makes extensive use of {{{java.nio.file}}} to satisfy its efficiency [Goals goals].
The {{{prebakery}}} is an ExtTool outside the ClientRoot so the caveats there apply to upgrading the PreBakery.


= Responsibilities =
The PreBakery watches the ClientRoot and sees when files change so it can determine which files to rebuild without {{{stat}}}ing every file.

It maintains [http://en.wikipedia.org/wiki/Cryptographic_hash_function hashes] of files under the client root so it can combine file hashes with rule hashes and other hashes to reliably determine which and only which commands need to be run to rebuild files that have changed based on dependencies.

= Client Watcher =
The PreBakery uses the java [http://java.sun.com/developer/technicalArticles/javase/nio/#6 watch service] to determine which files have changed in a reasonably cross-platform way that is independent of the number of files in the ClientRoot on most systems.

The PreBakery will not be efficient on systems for which the {{{WatchService}}} is not able to hook into the filesystem.


= FileSystem State =
The PreBakery maintains a hidden [PrebakeDirectory directory] in the client root that it uses to cache state.


= [http://en.wikipedia.org/wiki/Cryptographic_hash_function Hashes] and Caches =
|| *Key* || *Value* || *Use* ||
|| Path under ClientRoot || (hash(path), ChangeIndex) || Tracking file changes ||
|| [Product] name || hash(inputs, [BuildAction]s) || 

These hashes are stored in a [http://www.oracle.com/database/berkeley-db/je/index.html BDB] instance since some might become large.

There are also a number of caches:
|| PlanFile path || ([Product]s | {{{null}}}) || The products a plan file produced or null if it failed to run ||
|| (product name, product name) || || An edge in the PlanGraph ||


= Plans =
A plan is graph of [Product]s.  When in a consistent state, it is acyclic.

There is an edge for each dependency between products.

Dependencies are inferred based on the intersections of input and output descriptions.

|| *Tool* || *Inputs* || *Outputs* || *Notes* |
|| {{{javac}}} || {{{**/*.java}}} || {{{lib/**/*.class}}} || Compiles java source to bytecode ||
|| {{{junit}}} || {{{lib/tests/**/*.class}}} || {{{reports/junit/**/*.html}}} || Runs unit tests and generates reports ||
|| {{{jar}}} || {{{lib/src/**/*.class}}} || {{{lib/foo.jar}}} || Packages the non-test outputs ||

Given the above rules, we get a simple dependency graph
{{{
            +-------+
            | junit |
            +-------+
          /
+-------+
| javac |
+-------+
          \
            +-----+
            | jar |
            +-----+
}}}


= Tool Search Path =