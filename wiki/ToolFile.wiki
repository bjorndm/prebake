#summary a JavaScript bridge to the command line.

= Tool Files =
A tool file is a JavaScript file that appears on the PreBakery's tool search path.  Tool files can kick off an executable, like {{{gcc}}} or {{{javac}}} to do the work of building a [Product]'s output.

== Requirements ==
A tool file *must* be a child of a directory listed in the search path that the PreBakery was started with (see [Usage]).  This is not recursive -- if the search path is {{{foo}}}, the file {{{foo/bar.js}}} is a candidate, but {{{foo/bar/baz.js}}} is not.

A tool file name *must* end with {{{.js}}} and the rest of its name must be a valid JavaScript identifier.  The name {{{javac.js}}} is OK, but {{{dashed-name.js}}} is not since dashes are not allowed in JavaScript identifiers.

A tool file *must* parse as valid JavaScript.

The result of evaluating a tool file in the environment described below should be a [YSON ΛSON] value with the signature below.  You can do this by making sure the last statement in your file looks like
{{{
{
  help: "A documentation string",
  check: function (options, inputs, outputs) {
    ...
    console.warn("Option foo can't have value %s", badValue);
    ...
    return true;  // if options and product could be OK
  },
  fire: function (options, inputFiles, product) {
    // builds the product as described below
  },
}
}}}
where {{{options}}} is a frozen [YSON ΛSON] object that the tool is free to interpret however it likes ; {{{inputFiles}}} is an array of paths into the TmpWorkspace ; and {{{product}}} is the frozen [YSON ΛSON] of the product whose action is being evaluated.

The {{{fire}}} function *must* return a ProcessResult or raise an exception.

The {{{fire}}} function *may* log helpful messages to the [JsConsole].

A tool file *may* define a MobileFunction:
{{{
  check: function (options, inputs, outputs) { ... }
}}}
that *may* be run to give PlanFile authors quick feedback on what is wrong with [BuildAction action]s that use the tool.  The {{{options}}} parameter is the one that the author intends to pass to {{{fire}}}.  The {{{inputFiles}}} [Glob]s match source files that would be available in the TmpWorkspace and the {{{outputFiles}}} [Glob]s match generated files that would be copied back from the TmpWorkspace to the ClientRoot.  Either set of globs may match files intended for other [BuildAction action]s.

The {{{check}}} function *should* return true if the options could be valid, and *may* log helpful messages to the JsConsole for the plan author.

== Environment ==
In addition to the global objects defined by JavaScript, the tool will have available:

=== {{{exec(path, argv...)}}} ===
Spawns a process that runs the executable named by {{{path}}} with the given arguments and returns a ProcessResult.  This is synchronous.

The usual rules for path resolution apply -- if the path does not contain a file separator character -- then it is resolved against the OS search path.

The working directory will be the root of the TmpWorkspace.

The caller *must not* pass any arguments that are paths into the ClientRoot.

=== {{{console.log}}}, {{{warn}}}, etc. ===
See JsConsole.

=== {{{glob.intersect(a, b)}}} ===
Returns the intersection of two [Glob]s represented as strings or {{{null}}} if there is no intersection.

=== {{{load(path, globals)}}} ===
Loads JS from a path relative to the tool file, evaluates it in a context where globals is the global object, and returns the result.

== Limitations ==
The tool *must not* pass any arguments that are paths into the ClientRoot to {{{exec}}}.

If any arguments look like they might be or contain paths into the ClientRoot, {{{exec}}} may raise an exception.